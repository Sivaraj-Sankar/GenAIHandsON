Set-up Command 
conda create --name myenv python=3.10
conda activate myenv 


Decorator Useful for 
Logging
Timing
Authentication - like checking if a user is logged in
Caching - results to make things faster
Validation - before running a function


*args - Positional Arguments - List
**kwargs - Keyword Arguments - Dict 
normal_args, *args, default_args=default_value, **kwargs


*value - unpack
merged = {**dict1, **dict2}

Simple API Client
def call_api(endpoint, **params):
    response = requests.get(endpoint, params=params)
    return response.json()

print(call_api("https://api.weatherapi.com/v1/current.json", q="London", key="yourapikey"))


Context Manager [Created Special Environment] - file handling, database connections, network sockets, threading locks
To do some setup ➡️ work inside ➡️ do cleanup automatically — even if an error happens.
with open('data.txt', 'r') as file:
    content = file.read()
class Door:
    def __enter__(self):
        print("🚪 The door opens.")
        return "Welcome inside!"
    
    def __exit__(self, exc_type, exc_value, traceback):
        print("🚪 The door closes.")

# Using it
with Door() as message:
    print(message)
    print("Enjoying inside!")

print("Outside the door now.")

from contextlib import contextmanager

@contextmanager
def my_context():
    print("Start")
    yield "You are inside"
    print("End")

with my_context() as msg:
    print(msg)



Getting Inputs from Python 
a = input('Enter a Name:')
b = int(input('Enter a Age: '))
c = input('Enter Numbers:').split()
d = map(int, input('Enter Number: ').split())
e = list(map(str, input('Enter a Numbers :').strip().split()))

String Manipulation Functions
a.lower()
a.upper()
a.capitalize()
a.title()
a.swapcase()

a.islower()
a.isupper()
a.isalpha()
a.isdigit()
a.isalphanum()
a.isspace()

a.startswith('Si')
a.endswith('j')
a.find('a') --> Find First Occurence 
a.rfind('a') --> Find Last Occurence

a.index('a') 
a.rindex('a') --> Find index 
a.count('a')
a.count('a',2) --> second argument tells, it starts from 2 
a.replace('Si','ja') --> Replaces the Word 
a.split('a') --> Split string into list
a.rsplit('a') --> Split from right Side
a.partition('a') --> Split like before, separator, after
a.rpartition('a') --> 

a.join([]) 
a.strip()
a.rstrip()
a.lstrip()
input = 'Sivaraj {}'
input.format('Sankar')
input = 'Sivaraj {name}'
input.format(name='Sankar')


reduce function
---------------
from functools import reduce
reduce(function, iterable[, initializer])
from functools import reduce
nums = [1, 2, 3, 4]
total = reduce(lambda x, y: x + y, nums)
print(total)  # Output: 10
from functools import reduce
nums = [1, 2, 3]
product = reduce(lambda x, y: x * y, nums, 10)
print(product)  # Output: 60  (10 * 1 * 2 * 3)




lambda function, map function,filter 
numbers = [1, 2, 3, 4]
squared = list(map(lambda x: x ** 2, numbers)) --> apply the function for all elements 
print(squared)  # Output: [1, 4, 9, 16]
-----------
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))

-------
pairs = [(1, 3), (2, 2), (3, 1)]
# Sort by the second element of each tuple
sorted_pairs = sorted(pairs, key=lambda x: x[1])






