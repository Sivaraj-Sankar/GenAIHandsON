BeeAI
ACP  - This course is perfect for AI builders who want to easily reuse and connect multiple agents built with different frameworks in a single system

1.Build ACP-compliant agents by wrapping them in an ACP server
2.launch the server to activate the agents, and make them discoverable by ACP clients to enable easy integration within multi-agent systems.
3.Chain ACP-compliant agents in linear and hierarchical workflows; use a router agent to delegate tasks to the specialized agents.
4.Import ACP-compliant agents into a registry to make them easy to discover and share across teams.
5.Building a multi-agent system with agents shared across teams and organizations can be challenging

6.**You may need to write custom integrations each time a team updates their agent design or changes the agent’s framework

IBM Research’s BeeAI

1.The Agent Communication Protocol (ACP) is an open protocol that addresses this challenge by standardizing communication between agents.
2.Provides a unified interface through which agents can collaborate regardless of their frameworks.
3.Making it easy to replace an agent with a new version without needing to refactor the entire system.
4.you’ll learn to connect agents through ACP
5.The protocol is based on a client-server architecture
6.you host an agent built with any framework inside an ACP server
7.**You’ll build sequential and hierarchical workflows of agents hosted inside ACP servers
8.learn how to manage this workflow on the client side through a **process or another agent. 

1.Learn the underlying architecture of ACP and how it enables agents built with different frameworks to work together through a common interface.
2.Understand the lifecycle of an ACP Agent (configuration, activation, discovery, execution), and how it compares to other protocols, such as MCP (Model Context Protocol) and A2A (Agent-to-Agent).
3.Build a RAG agent with CrewAI and wrap it inside an ACP server.
4.Define an ACP Client to make calls to the ACP server you created.
5.Define another ACP server, built with Smolagents, and sequentially chain it to the RAG agent.
6.Build a hierarchical workflow using a router agent that transforms a user’s query into tasks and delegates the tasks to agents available through ACP servers.
7.Build an agent that uses MCP to access tools and ACP to communicate with other agents.
8.Import your ACP agents to the BeeAI platform, an open-source registry to discover and share agents easily

1.Catalog provides Centralized Agent Listings and simplifies searching for agents, especially for large scale deployments or Enterprise Environments 
2.ACP Agents Can access the MCP to use the tools, then use the ACP to interact with other agents.
3.ACP Agents to BeeAI Platform - Open Source Registry 
4.ACP provides interOperable - Agent can Exchange information to another Agent and make use of information
5.ACP Uses InterCompany Agents
6.ACP Uses Different Agents 
7.ACP Dynamic Updating 
8.ACP Work as a Team

ACP Core Principles 
--------------------
1.Architecture 
2.LifeCycle of ACP Agent
3.ACP Fits below the application layer - Operational Layer 
4.Uses the HTTP and REST Architecture Style - to facilitate communicate between independent systems 
5.ACP is based on Client Server Architecture 

Compare with Other Protocol - MCP & A2A
1.When Comes to shared Memory - MCP Supports for Session Management, meaning servers can stateful and maintain information about the client sessions between requests 
2.MCP Doesn't handle the state itself 
3.ACP SDK supports the centralized storage for runs and sessions 
     - meaning Multiple ACP Servers can persist information across these runs and sessions 
4.MCP Doesn't follow any message structure - for the LLM 
   - Agent needs to support natural language as well as other modalities 
5.ACP messages follows multimodal structure for exchanging content 
6.In A2A - Agent Output & Message History is separated 
        This makes very difficulty in to determine the order of events in a multi-agent turn, without implementing additional ways of persisting this information
        this is very important in transparency & observability 
7.A2A - Also supports both stateful and stateless agent, but the interaction mode is determine dynamically by the agent 
8. 

ACP Operability 
1.Begin the process of sequentially chaining these agent
2.Router Agent to navigate different agent by themselves
 - When we Run Herarichal workflow, - first we will discover the agents 
 - Then Pass that list to the router agent 
 - So it automatically navigate, which agents it should be calling on which ACP Server
 - ACP Calling Agent - Which is Really a Router Agent 
     - It will break up the prompt and it will choose which agent will be best for answer the question 
 - ACP Calling Agent - similar to the tool calling agent from smolagent
    - But Rather than calling tool, it's going to call different agent 
             ACP agent, 
             model 
             Prompt template 
             planning intervals 
    - For Agent Collections - we can identify the different Agent ACP Servers 
      - and all of the Agent's got available on those ACP Servers 


Qwen 2.5 14B 


spawned and swarm
-----------------

Agentic Doubt
1) How Human in loop works, if agentic reason following certain pattern and reasoning and gives answer and human stops in the middle - How the Agent Will ReExecute 
2) How the Complex Question Reasoning will works iteratively with CoT Prompt reasoning 


