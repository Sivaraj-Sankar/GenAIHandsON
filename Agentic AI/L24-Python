from collections import Counter 
1. Counter(numbers).most_common(1)
2. counter.most_common()[-1]
3. counter.values()
4. counter.items()

1.from collections import OrderedDict
od = OrderedDict()
od['apple'] = 3
od['banana'] = 5
od['orange'] = 2
2. Comparing two Dict 
od1 = OrderedDict(a=1, b=2)
od2 = OrderedDict(b=2, a=1)
print(od1 == od2)  # False, order is different
3. Inputing the Ordered Dict -> c = OrderedDict([("S","D"),("D","D")])
d = OrderedDict(a=1,b=1,c=2)
b = OrderedDict({})
b["siva"] = "raj"

defaultdict(default_factory, mapping_or_iterable=None)
1.from collections import defaultdict
a = defaultdict(list)
print(l['Sivaraj'])
person_count = defaultdict(int)  # default value = 0
person_count['Alice'] += 1
person_count['Bob'] += 1

from collections import defaultdict
person = {'Alice': 25, 'Bob': 30}
# default value is "unknown" for missing keys
person_dd = defaultdict(lambda: "unknown", person)
print(person_dd['Alice'])   # 25  (existing key)
print(person_dd['Charlie']) # unknown  (missing key)




1.a = float('-inf')

print(a.isalpha())
print(a.isdigit())
print(a.isalnum())
print(a.isdecimal())
print(a.isspace())

1.# True if there is any non-alphanumeric character
has_special = any(not ch.isalnum() for ch in s)  --> any(iterable)

str.count(sub[, start[, end]]) → Count occurrences of substring.
str.find(sub[, start[, end]]) → Index of first occurrence, -1 if not found.
str.rfind(sub[, start[, end]]) → Index of last occurrence, -1 if not found.
str.index(sub[, start[, end]]) → Like find(), but raises ValueError if not found.
str.rindex(sub[, start[, end]]) → Like rfind(), but raises ValueError if not found.
str.startswith(prefix[, start[, end]]) → Checks if string starts with prefix.
str.endswith(suffix[, start[, end]]) → Checks if string ends with suffix.
str.partition(sep) → Splits into tuple (before, sep, after) at first occurrence.
str.rpartition(sep) → Splits at last occurrence.
str.split(sep=None, maxsplit=-1) → Splits string into list.
str.rsplit(sep=None, maxsplit=-1) → Splits string from right.
str.splitlines(keepends=False) → Splits string at line breaks.
str.replace(old, new[, count]) → Replaces occurrences of a substring.



1. Decorator 
def dec(func):
    def wrapper():
        print("Before the main function")
        func()
    return wrapper
    
    
@dec
def say_hello():
    print("This is the main function")
    
say_hello()


To Revise 
popitem
iterator 
generator 


1.RAG - Different Chunking, VB, Retrieval, Caching, Fallback, Prompting, Testing, LangGraph 
2.Previous Project Compliance Ready Project - Obscure, Data Privacy and Governance , DDD Design , FastAPI, Azure Service to Deploy
3.General GenAI Topic - Different Parameter, Transformer Usage and Mathematical, Agentic AI
4.General Machine Learning - Trade-Off, Bias, Variance, Gradient Descent, Not Convergence Reason, Neural Network
5.Software Engineering Principles - SOLID,KISS, Design Pattern, LLD, HLD[Architecting]




