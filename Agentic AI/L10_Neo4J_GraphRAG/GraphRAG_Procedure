Neo4J

Knowledge Graphs for RAG

Use Neo4j’s query language Cypher to manage and retrieve data stored in knowledge graphs.
Write knowledge graph queries that find and format text data to provide more relevant context to LLMs for Retrieval Augmented Generation.

1.Knowledge graphs are used in development to structure complex data relationships
2.Drive intelligent search functionality, and build powerful AI applications that can reason over different data types.
3.Knowledge graphs can connect data from both structured and unstructured sources (databases, documents, etc.)
4.knowledge graphs can capture the meaning and context behind the data, allowing you to uncover insights and connections that would be difficult to find with conventional databases
5.This rich, structured context is ideal for improving the output of large language models (LLMs)
     ** Because you can build more relevant context for the model than with semantic search alone. 

Understand the basics of how knowledge graphs store data by using nodes to represent entities and edges to represent relationships between nodes

1.Graph database stores data in the form of nodes, edges (relationships), and properties
2.It's designed to model and query relationships between data, which makes it well-suited for use cases like social networks, recommendation engines, fraud detection, knowledge graphs

Component	Description
Node	Represents an entity (person, product, location, etc.)
Edge/Relationship	Represents a connection or relationship between two nodes
Property	Key-value pairs that store information about nodes and edges
Labels (optional)	Tags on nodes to categorize them (like "Person", "Movie", etc.)
Relationship Types	Names given to relationships (like "FRIENDS_WITH", "BOUGHT", etc.)

1.Think of a node like a record or row in a table.
(Person: {name: "Alice", age: 30}) 
2.Each relationship connects two nodes.
Can have direction and properties of their own.
(Alice)-[:FRIENDS_WITH {since: 2015}]->(Bob) 

Database Engine
1.Nodes and relationships are stored as unique records.
2.Indexes can be used on node properties for faster lookup.
3.Adjacency lists or pointers often store direct links between connected nodes, making graph traversal very fast (compared to join-heavy relational databases)
(Neo4j, JanusGraph, Amazon Neptune, etc.)
4.Data structures often optimized for graph traversal, not just data retrieval.

(Alice)-[:FRIENDS_WITH]->(Bob)
  |
  v
(Movie: "Inception")


Cypher	Neo4j, Memgraph, SAP Hana Graph	Declarative language similar to SQL but for graphs. Very expressive and human-friendly.
Gremlin	Apache TinkerPop, JanusGraph, AWS Neptune, Azure Cosmos DB	A graph traversal language — procedural in style — allows complex path queries.
GQL (Graph Query Language)	Coming as an ISO standard, with early support in Neo4j and others	Emerging standard, designed to unify Cypher & other concepts — similar in spirit to SQL for graphs.
SPARQL	RDF triple stores (Apache Jena, GraphDB, Stardog, Virtuoso)	For querying RDF graphs (semantic web). Based on triples (subject-predicate-object).

Query Language	Primary Graph DBs Using It	Description
Cypher	Neo4j, Memgraph, SAP Hana Graph	Declarative language similar to SQL but for graphs. Very expressive and human-friendly.
Gremlin	Apache TinkerPop, JanusGraph, AWS Neptune, Azure Cosmos DB	A graph traversal language — procedural in style — allows complex path queries.
GQL (Graph Query Language)	Coming as an ISO standard, with early support in Neo4j and others	Emerging standard, designed to unify Cypher & other concepts — similar in spirit to SQL for graphs.
SPARQL	RDF triple stores (Apache Jena, GraphDB, Stardog, Virtuoso)	For querying RDF graphs (semantic web). Based on triples (subject-predicate-object).
GraphQL	Not technically a graph DB language — but used as an API query language that can query graph databases or other APIs. Often used on top of graph DBs.

Cypher
Declarative (like SQL)
MATCH (a:Person)-[:FRIENDS_WITH]->(b:Person)
WHERE a.name = 'Alice'
RETURN b.name


Gremlin
Imperative (you describe how to traverse)
Part of Apache TinkerPop framework
g.V().hasLabel('person').has('name', 'Alice').out('FRIENDS_WITH').values('name')

3️⃣ GQL
ISO standard in progress
Goal: cross-DB compatibility
Builds on Cypher ideas

4️⃣ SPARQL
For RDF graphs (semantic web)

Example:

sparql
Copy
Edit
SELECT ?friendName
WHERE {
  ?person foaf:name "Alice" .
  ?person foaf:knows ?friend .
  ?friend foaf:name ?friendName .
}

5️⃣ GraphQL
API query language (not a DB language itself)

Often used with graph DBs to expose data via an API

Example:

graphql
Copy
Edit
{
  person(name: "Alice") {
    friends {
      name
    }
  }
}


Language	Style	Use Case
Cypher	Declarative	Neo4j, property graphs
Gremlin	Imperative	TinkerPop, property graphs
GQL	Declarative	Future standard
SPARQL	Declarative	RDF graphs (semantic web)
GraphQL	Declarative API	API layer on top of any DB


How to leverage knowledge graphs within retrieval augmented generation (RAG) applications.
1.Understand the basics of how knowledge graphs store data by using nodes to represent entities and edges to represent relationships between nodes.
2.Add a vector index to a knowledge graph to represent unstructured text data and find relevant texts using vector similarity search.
3.Build a knowledge graph of text documents from scratch, using publicly available financial and investment documents as the demo use case
4.Explore advanced techniques for connecting multiple knowledge graphs and using complex queries for comprehensive data retrieval.
5.Write advanced Cypher queries to retrieve relevant information from the graph and format it for inclusion in your prompt to an LLM.

Key Points
1.Relationships and Metadata in the Graph to improve the relevance of the text 
2.Using Similarity Search and the Chunk traverse the graph and find other similar other chunks - Knowledge Graph

**To Build a Knowledge Graph for Collection of EDGAR Forms 
Compaines are requires to file the Securities Exchange Commission

1.One Set of SEC Forms
2.Second Set of SEC forms
3.Connect Two Graphs Using Linking data



SEC - Government Agency    U.S 
-----------------------
Protect investors
Maintain fair, orderly, and efficient markets
Facilitate capital formation (help companies raise money from the public)

When a company wants to raise money from the public by selling stocks or bonds, or if it's already publicly traded (meaning its stock is bought and sold on stock exchanges like the NYSE or NASDAQ), the SEC requires the company to regularly file reports that give a clear and truthful picture of its financial health and operations.
Transparency — Investors need reliable information to make informed decisions.
Accountability — Helps prevent fraud and dishonest practices.
Market Stability — Keeps financial markets fair and efficient.

Filing	Purpose
10-K	Annual report with detailed financial statements
10-Q	Quarterly report with financial updates
8-K	Reports major events (mergers, leadership changes, etc.)
S-1	Used when a company is going public (IPO)





