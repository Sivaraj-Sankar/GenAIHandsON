Index 
Obfuscation 
HydroX AI - PII Masking 
Zilliz[Milvus] : PII Masking 
Azure Data Masking Services - AI Application 


PII Data
https://medium.com/@abdourahmanebah112/data-obfuscation-in-the-bronze-layer-of-fabric-lakehouse-framework-507791c470f8


Obfuscation - Microsoft Fabric Lakehouse (Encryption & Masking)
1.Bronze layer using encryption, partial masking, and full masking.
2.When ingesting raw data into Microsoft Fabric Lakehouse, it’s critical to protect sensitive information such as names, emails, and healthcare identifiers before it flows into downstream layers.
3.Implementing dynamic data obfuscation is crucial for protecting personally Identifiable Information (PII) and ensuring compliance with regulatory requirements.
4.However, applying obfuscation within the Fabric Lakehouse comes with certain challenges due to current platform limitations
5.At this time, Fabric Lakehouse does not support native row-level or column-level security, meaning users can still access full datasets through Fabric notebooks or the Lakehouse browser
6.The Row-Level Security (RLS) can only be implemented when accessing the data through a SQL Endpoint or a Warehouse in Fabric

1.In contrast, platforms like Databricks offer built-in functions such as **is_member to enforce dynamic to enforce dynamic, user-based access controls, capabilities that are not yet available in Fabric.

Architecture - Fabric 
1.we introduced a Landing Zone for secure obfuscation before data reaches the Bronze layer
2.1. Raw data is first ingested into the Landing Zone (restricted workspace).
2.2. Obfuscation logic is applied using notebooks, including encryption, partial, and full masking and other data security actions.
2.3. Once secured, the data is exposed to Bronze Lakehouses via shortcuts.

Procedures
----------
1.Raw data enters temporary schemas (e.g., temp) in the Landing Zone.
2.Data is retained in temporary schemas until obfuscation is successfully applied.
3.In case of any issues during the process, the temporary tables should be dropped to prevent non-obfuscated data from remaining in the landing zone.
4.In case of any issues during the process, the temporary tables should be dropped to prevent non-obfuscated data from remaining in the landing zone.
5.Obfuscated data is moved to clean schemas and then shortcut to the Bronze layer.
6.Temporary tables are deleted post-obfuscation.
This approach ensures consistent, secure data handling across all environments.
7.Access to the Landing Zone is restricted and should be granted only to users who are authorized to view unmasked data


Code Example 
------------
Data Obfuscation Methods:
PySpark Code Example
1. Data Encryption functions
Install the ‘cryptography’ package in your Fabric workspace




Limitations
This makes implementing fine-grained security controls more complex in Fabric Lakehouse

------------------------------------------------------------------
Safe RAG with HydroX AI and Zilliz: PII Masking for Responsible AI 
https://zilliz.com/blog/safe-rag-with-hydrox-ai-and-zilliz-pii-masking-for-responsible-genai
https://github.com/HydroXai/pii-masker

1. Data Masking/PII Masking/Privacy for AI/Vector Databases 
2.HydroX AI is a platform focused on AI Safety, governance and privacy. 
3.PII Masker is their offering, Detect & Mask Personally Identifiable Information (PII) in text, 
  especially before data enters AI Pipelines or vector databases. 
4.PII Masker uses Machine Learning/NLP (for Example the DeBERTa-v3 model) to identify sensitive entities (names, addresses, etc) and mask or **anonymize them



1.HydroX Data Masking about preprocessing/filtering sensitive text before ingestion. 
 - To prevent the unstructured text might leak PII 
2.So the Integration ensures responsible AI/Privacy compliance in vector data workflows, especially when Text is embedded and stored. 

Steps
1. Text or Documents may contain PII(Names, Addresses, Phone Numbers) etc
2. Before ingesting these into a Vector Database(for Embedding, search, retrieval etc) one runs PII Masker(HydroX AI) to detect and mask the PII 
3. The Masked output is what gets sent to a vector database like Milvus/Zilliz. That way, even if embeddings or metadata leak, the PII is already hidden
4.Organizations can ensure privacy at every layer of their data pipeline by anonymizing or masking PII using the PII Marker before data reaches the vector database.
5.allowing users to confidently build GenAI applications while keeping their knowledge bases and RAG applications compliant with privacy regulations and protecting user data.

PII Masker automatically detects and masks PII with high precision. Using the DeBERTa-v3 NLP model, PII Masker identifies sensitive information and provides structured output for easy handling
With support for up to 1,024 tokens, PII Masker efficiently processes large datasets while safeguarding PII
This capability helps prevent RAG and various GenAI applications from accidentally exposing sensitive information in responses, reducing data leakage risks and ensuring queries remain private.

Improved Detection of Contextual PII
Currently, the PII Masker detects explicit PII such as names, addresses, and phone numbers. In future iterations, it aims to enhance its ability to identify and mask contextually implied PII—information that might not be explicitly sensitive but could reveal identity when combined with other data.

----------------------------------------------
Azure Services Mask or Redact PII Data 

PII Detection & Masking in unstructured text or documents
1.Azure AI Language - Text PII/Conversational PII Detection 
      -> Detects PII/PHI in unstructured text, conversation transcripts etc.
         It can also redact or mask detected entities 
1.1Azure AI Language PII detection uses Named Entity Recognition (NER) to identify and redact sensitive information from input data
1.2The service classifies sensitive personal data into predefined categories
1.3These categories include phone numbers, email addresses, and identification documents. This classification helps to efficiently detect and eliminate such information.




Foundry AI Projects - Azure AI Foundry project - managed under an Azure AI Foundry resource
-------------------
https://learn.microsoft.com/en-us/azure/ai-foundry/quickstarts/get-started-code?tabs=python
Hub Projects - A hub-based project is hosted by an Azure AI Foundry hub
------------
https://learn.microsoft.com/en-us/azure/ai-foundry/how-to/hub-create-projects
Azure AI Foundry Resource Creation 
-----------------------------------
https://learn.microsoft.com/en-us/azure/ai-services/multi-service-resource?pivots=azportal
Azure AI Foundry Projects 
-------------------------
https://learn.microsoft.com/en-us/azure/ai-foundry/how-to/create-projects?tabs=ai-foundry
Content Saftey 
--------------
https://learn.microsoft.com/en-us/azure/ai-services/content-safety/
PII Data Detection Using the Language Service 
---------------------------------------------
https://learn.microsoft.com/en-us/azure/ai-services/language-service/personally-identifiable-information/overview?utm_source=chatgpt.com&tabs=text-pii
https://learn.microsoft.com/en-us/azure/ai-services/language-service/personally-identifiable-information/quickstart?tabs=windows&pivots=ai-foundry-portal
PII Detection Native Documnet Single Language 
---------------------------------------------
https://learn.microsoft.com/en-us/azure/ai-services/language-service/personally-identifiable-information/how-to/redact-document-pii?utm_source=chatgpt.com
https://learn.microsoft.com/en-us/azure/ai-services/language-service/personally-identifiable-information/how-to/redact-document-pii?utm_source=chatgpt.com
https://learn.microsoft.com/en-us/azure/ai-services/language-service/personally-identifiable-information/overview?utm_source=chatgpt.com&tabs=text-pii
Azure Cognitive Search Skills
-----------------------------
https://learn.microsoft.com/en-gb/azure/search/cognitive-search-skill-pii-detection?utm_source=chatgpt.com



Important Steps to Implement with Azure AI Services 
----------------------------------------------------
When ingesting data (text / documents), run it through Azure AI Language PII detection or the Document PII detection API.
Mask or redact sensitive entities — either by replacing with labels (e.g. [PERSON]) or using placeholders / characters.
Store both the masked text (used for embeddings, search, retrieval) and optionally the metadata about what was masked (so you know what was removed).
If you need to serve or show documents to end users, use the redacted version, so no original PII leaks.
If you need custom masking rules (company names, internal terms, etc.), possibly combine with open source tools like Presidio, or build custom entity recognizers.


Delphix Compliance Services 
----------------------------
Provides automated sensitive data / PII discovery and masking in Azure data flows (e.g. Azure Data Lake, Databricks, Synapse).
Best if you are dealing with large datasets / data lakes / structured + unstructured mixed, and want automated masking within ETL or data pipeline flows.
https://web-assets2.delphix.com/f/137721/x/77b0675b62/432-ds-compliant-services-azure.pdf?utm_source=chatgpt.com

Types of Projects
------------------
https://learn.microsoft.com/en-us/azure/ai-foundry/what-is-azure-ai-foundry#project-types

Presidio 
--------
The project gained traction in privacy-aware data pipelines — especially in Azure, Databricks, and data governance workflows.
Microsoft expanded Presidio’s capabilities with:
Integration with spaCy and Stanza NLP libraries
Support for custom recognizers (user-defined PII patterns)
Additions for image anonymization and voice redaction |
| 2024+ | Widely adopted across industries for responsible AI and LLM data preprocessing — many teams use it before embedding documents into vector stores or RAG systems. |


PII detection (Analyzer) → finds entities like names, emails, phone numbers, etc.
Anonymization (Anonymizer) → masks or replaces detected entities.
Extensibility → allows custom rules (e.g., company IDs, internal codes).
Works on text, structured data, images, and audio.


