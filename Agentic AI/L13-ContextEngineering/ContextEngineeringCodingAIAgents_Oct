The Only Agentic Coding Pattern you need 

4.Verification - 
Create feedback loops to test that the plan was implemented correctly(models still occasionally fail on execution)

Agents.md
Multi Step Approach to Context Engineerinng 

0. Tasks 
   -> Operating on task basis. 
   -> Sotre all intermediate context in markdown files in tasks/<task-id>/folders. 
   -> Use Semantic task id slugs 
1. Research 
   -> Finding existing patterns in this codebase 
   -> Search internet if relevant 
   -> Start by asking follow up questions to set the direction of research 
   -> Report findings in research.md file 
2. Planning 
   -> Read the research.md in tasks for <task-id> 
   -> Based on the research come up with a plan for implementing the user request. We should reuse existing patterns, 
      components and code where possible. 
   -> If needed, ask clarifying questions to user to understand the scope of the task. 
   -> Write the comprehensive plan to plan.md. The plan should include all context required for an engineer to implement the feature. 

3. Implementation
    a. Read plan.md and create a todo-list with all items, then execute on the plan. 
    b. Go for as long as possible. If ambiguous, leave all questions to the end and group them. 

Tips
1. Run the Second Agent to audit the implementation of the first agent. 
2. Everything built from tickets so it's easy for the second agent to check the boxes and see what was implemented. 


augment code is always the auditor and the initial ticket writer. - it's just the best at project context imo. 
Builder is either roo code with own custom agent stack or cursor. 



Reference 
https://agents.md/ --> Guiding the Coding Agent 
https://code.visualstudio.com/docs/copilot/overview - VS Code 


